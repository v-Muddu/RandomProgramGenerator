<compilation unit> ::= package oole.random<package declaration>; <import declarations>? <type declarations>

<package declaration> ::=   <package declaration><package name> | <package name>
<package name> ::= .<packageIdentifier>

<import declarations> ::= import oole.random.*;
<import declaration> ::= <single type import declaration> | <type import on demand declaration>
<single type import declaration> ::= import <type name> ;
<type import on demand declaration> ::= import <package name> . * ;
<type name> ::= <identifier> | <package name> . <identifier>

<type declarations> ::= <type declaration> | <type declarations> <type declaration>
<type declaration> ::= <class declaration with public> | <interface declaration> | <class declaration with abstract> | <class declaration with final>;

<class declaration with public> ::= public class <classIdentifier> <super><class body>| public class <classIdentifier>  <interfaces> <class body>
<super> ::= <prevDeclaredClass>
<interfaces> ::= <interface type list>
<interface type list> ::= <prevDeclaredInterface>
<class body> ::= { <class body declarations> }
<class body declarations> ::= <class body declaration> | <class body declarations> <class body declaration>
<class body declaration> ::= <class member declaration>  | <constructor declaration>

<class member declaration> ::= <field declaration> | <method declaration>
<field declaration> ::= <field modifiers>? <type> <variable declarators> ;
<field modifiers> ::= <field modifier>
<field modifier> ::= public | protected | private | static
<type> ::= <primitive type>
<primitive type> ::= <numeric type> | boolean
<numeric type> ::= <integral type> | <floating-point type>
<integral type> ::= byte | short | int | long | char
<floating-point type> ::= float | double
<reference type> ::= <array type>
<array type> ::= <arraytype> [ ]
<arraytype> ::= <numeric type>
<variable declarators> ::= <variable declarator> | <variable declarators> , <variable declarator>
<variable declarator> ::= <variable declarator id>
<variable declarator id> ::= <variableIdentifier>
<method declaration> ::= <method header> <method body>
<method header> ::= <method modifiers> <result type> <method declarator>
<method modifiers> ::= <method modifier>
<method modifier> ::= public | protected | private | static | final
<result type> ::= <type> | void
<method declarator> ::= <methodIdentifier> ( <formal parameter list> )
<formal parameter list> ::= <formal parameter> | <formal parameter list> , <formal parameter>
<formal parameter> ::= <type> <variable declarator id>
<method body> ::= <block> ;
<static initializer> ::= static <block>
<constructor declaration> ::= <constructor modifiers>? <constructor declarator> <constructor body>
<constructor modifiers> ::= <constructor modifier>
<constructor modifier> ::= public | protected | private
<constructor declarator> ::= <simple type name> ( <formal parameter list> )
<constructor body> ::= { <block statements>? }
<interface declaration> ::= <interface modifiers>? interface <interfaceIdentifier>  <interface body>
<interface modifiers> ::= <interface modifier>
<interface modifier> ::= public | abstract
<interface body> ::= { <interface member declarations>? }
<interface member declarations> ::= <interface member declaration> | <interface member declarations> <interface member declaration>
<interface member declaration> ::= <abstract method declaration>
<constant declaration> ::= <constant modifiers> <type> <variable declarator>;
<constant modifiers> ::= public | static | final
<abstract method declaration>::= <abstract method modifiers> <result type> <abstract method declarator>;
<abstract method modifiers> ::= <abstract method modifier>
<abstract method modifier> ::= public abstract
<abstract method declarator> ::= <method declarator>
<class declaration with abstract> ::= <class modifier public>? abstract class <classIdentifier> <interface body>
<class modifier public> ::= public
<class declaration with final> ::= <class modifier public>? final class <finalClassIdentifier> <super>? <class body> |<class modifier public>? final class <finalClassIdentifier>  <interfaces>? <class body>
<class modifier public> ::= public

<block> ::= { <block statements>? }
<block statements> ::= <block statement> | <block statements> <block statement>
<block statement> ::= <local variable declaration statement> | <statement>
<local variable declaration statement> ::= <local variable declaration> ;
<local variable declaration> ::= <type> <variable declarators>

<statement> ::= <statement without trailing substatement>  | <if then statement> | <if then else statement> | <while statement>

<statement without trailing substatement> ::= <block> | <empty statement> | <expression statement> | <switch statement> | <do statement> | <return statement>  | <try statement>
<empty statement> ::= ;
<expression statement> ::= <statement expression> ;
<statement expression> ::= <assignment> | <preincrement expression> | <postincrement expression> | <predecrement expression> | <postdecrement expression>
<assignment> ::= <left hand side> <assignment operator> <assignment expression>
<left hand side> ::= <expression name>
<expression name> ::= <intIdentifier>
<assignment operator> ::= = | *= | /= | %= | += | -= | <<= | >>= | >>>= | &= | ^=
<assignment expression> ::= <conditional expression> | <assignment> | <math expression>
<math expression> ::= <additive or sub expression> | <multiplicative or div expression>
<additive or sub expression> ::= <math or identifier> + <math or identifier> | <math or identifier> - <math or identifier>
<multiplicative or div expression> ::= <math or identifier> * <math or identifier> | <math or identifier> / <math or identifier> | <math or identifier> % <math or identifier>
<math or identifier> ::= <intIdentifier>  | <digits>
<digits> ::= <digit> | <digits> <digit>
<digit> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0
<non zero digit> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<postdecrement expression> ::= <intIdentifier>  --
<postincrement expression> ::= <intIdentifier>  ++
<predecrement expression> ::= -- <intIdentifier>
<preincrement expression> ::= ++ <intIdentifier>
<conditional expression> ::= <equality expression>
<conditional and expression> ::= <intIdentifier>  &&  <intIdentifier>
<conditional or expression> ::= <intIdentifier>  ||  <intIdentifier>
<equality expression> ::= <intIdentifier>!=<intIdentifier> | <intIdentifier>==<intIdentifier>
<switch statement> ::= switch ( <intIdentifier> ) <switch block>
<expression> ::= <assignment expression>
<switch block> ::= { <switch block statement groups>? <switch labels>? default : <block> }
<switch block statement groups> ::= <switch block statement group> | <switch block statement groups> <switch block statement group>
<switch block statement group> ::= <switch labels>
<switch labels> ::= <switch label> | <switch labels> <switch label>
<switch label> ::= case <digit> : <block>
<constant expression> ::= <expression>
<do statement> ::= do {<statement>} while ( <conditional expression> ) ;
<break statement> ::= break ;
<continue statement> ::= continue;
<return statement> ::= return <expression>? ;
<synchronized statement> ::= synchronized ( <expression> )
<try statement> ::= try <block> <catches> | try <block> <catches>? <finally>
<catches> ::= <catch clause>
<catch clause> ::= catch ( Exception <variableIdentifier> ) <block>
<finally> ::= finally <block>
<if then statement>::= if ( <conditional expression> ) <block>
<if then else statement>::= if ( <conditional expression> ) <block> else <block>
<statement no short if> ::= <statement without trailing substatement> | <if then else statement no short if> | <while statement no short if>
<labeled statement no short if> ::= <identifier> : <statement no short if>
<if then else statement no short if> ::= if ( <conditional expression> ) <block> else <block>
<while statement> ::= while ( <conditional expression> ) <block>
<while statement no short if> ::= while ( <conditional expression> ) <block>
<intIdentifier> ::= <digit>
